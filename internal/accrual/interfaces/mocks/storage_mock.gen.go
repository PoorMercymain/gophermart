// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PoorMercymain/gophermart/internal/accrual/interfaces (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/PoorMercymain/gophermart/internal/accrual/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ClosePool mocks base method.
func (m *MockStorage) ClosePool() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClosePool")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClosePool indicates an expected call of ClosePool.
func (mr *MockStorageMockRecorder) ClosePool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClosePool", reflect.TypeOf((*MockStorage)(nil).ClosePool))
}

// GetGoods mocks base method.
func (m *MockStorage) GetGoods(arg0 context.Context) ([]*domain.Goods, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoods", arg0)
	ret0, _ := ret[0].([]*domain.Goods)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoods indicates an expected call of GetGoods.
func (mr *MockStorageMockRecorder) GetGoods(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoods", reflect.TypeOf((*MockStorage)(nil).GetGoods), arg0)
}

// GetOrder mocks base method.
func (m *MockStorage) GetOrder(arg0 context.Context, arg1 *string) (*domain.OrderRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(*domain.OrderRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorageMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), arg0, arg1)
}

// GetOrderGoods mocks base method.
func (m *MockStorage) GetOrderGoods(arg0 context.Context, arg1 *string) ([]*domain.OrderGoods, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderGoods", arg0, arg1)
	ret0, _ := ret[0].([]*domain.OrderGoods)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderGoods indicates an expected call of GetOrderGoods.
func (mr *MockStorageMockRecorder) GetOrderGoods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderGoods", reflect.TypeOf((*MockStorage)(nil).GetOrderGoods), arg0, arg1)
}

// GetUnprocessedOrders mocks base method.
func (m *MockStorage) GetUnprocessedOrders(arg0 context.Context) ([]*domain.OrderRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnprocessedOrders", arg0)
	ret0, _ := ret[0].([]*domain.OrderRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnprocessedOrders indicates an expected call of GetUnprocessedOrders.
func (mr *MockStorageMockRecorder) GetUnprocessedOrders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnprocessedOrders", reflect.TypeOf((*MockStorage)(nil).GetUnprocessedOrders), arg0)
}

// Ping mocks base method.
func (m *MockStorage) Ping(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), arg0)
}

// StoreGoodsReward mocks base method.
func (m *MockStorage) StoreGoodsReward(arg0 context.Context, arg1 *domain.Goods) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreGoodsReward", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreGoodsReward indicates an expected call of StoreGoodsReward.
func (mr *MockStorageMockRecorder) StoreGoodsReward(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreGoodsReward", reflect.TypeOf((*MockStorage)(nil).StoreGoodsReward), arg0, arg1)
}

// StoreOrder mocks base method.
func (m *MockStorage) StoreOrder(arg0 context.Context, arg1 *domain.OrderRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrder indicates an expected call of StoreOrder.
func (mr *MockStorageMockRecorder) StoreOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrder", reflect.TypeOf((*MockStorage)(nil).StoreOrder), arg0, arg1)
}

// StoreOrderGoods mocks base method.
func (m *MockStorage) StoreOrderGoods(arg0 context.Context, arg1 *domain.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrderGoods", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrderGoods indicates an expected call of StoreOrderGoods.
func (mr *MockStorageMockRecorder) StoreOrderGoods(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrderGoods", reflect.TypeOf((*MockStorage)(nil).StoreOrderGoods), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStorage) UpdateOrder(arg0 context.Context, arg1 *domain.OrderRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStorageMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStorage)(nil).UpdateOrder), arg0, arg1)
}
