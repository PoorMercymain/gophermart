// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PoorMercymain/gophermart/internal/domain (interfaces: Communicator)

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommunicator is a mock of Communicator interface.
type MockCommunicator struct {
	ctrl     *gomock.Controller
	recorder *MockCommunicatorMockRecorder
}

// MockCommunicatorMockRecorder is the mock recorder for MockCommunicator.
type MockCommunicatorMockRecorder struct {
	mock *MockCommunicator
}

// NewMockCommunicator creates a new mock instance.
func NewMockCommunicator(ctrl *gomock.Controller) *MockCommunicator {
	mock := &MockCommunicator{ctrl: ctrl}
	mock.recorder = &MockCommunicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunicator) EXPECT() *MockCommunicatorMockRecorder {
	return m.recorder
}

// GetOrderAccrual mocks base method.
func (m *MockCommunicator) GetOrderAccrual(arg0 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderAccrual", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderAccrual indicates an expected call of GetOrderAccrual.
func (mr *MockCommunicatorMockRecorder) GetOrderAccrual(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderAccrual", reflect.TypeOf((*MockCommunicator)(nil).GetOrderAccrual), arg0)
}
